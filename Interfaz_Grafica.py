{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe8b0980-eba6-4437-bd2a-eee8794c989b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import Tk, Label, Button, Entry\n",
    "import serial\n",
    "import time\n",
    "import threading\n",
    "\n",
    "#------------\n",
    "# GUI design\n",
    "#------------\n",
    "\n",
    "root = Tk()\n",
    "root.title(\"Interfaz_Gráfica_LAB3\")\n",
    "root.resizable(0, 0)  #poner bloqueado el acceso a redimensionar\n",
    "root.geometry(\"400x400\")\n",
    "\n",
    "#---------------------------------------------------------\n",
    "\n",
    "Runpot = True\n",
    "cambio = 1  # Variable de multiplexación de potenciometros\n",
    "bloqueoUART = 1  # Variable de bloqueo de UART normal\n",
    "\n",
    "#------------\n",
    "# Reading potenciometers\n",
    "#------------\n",
    "\n",
    "entry1 = Entry(root, bg='#fdf2e9')\n",
    "entry1.place(x=200, y=70, width=30, height=30)\n",
    "\n",
    "entry2 = Entry(root, bg='#fdf2e9')\n",
    "entry2.place(x=200, y=120, width=30, height=30)\n",
    "\n",
    "def pots():\n",
    "    global cambio\n",
    "    global bloqueoUART\n",
    "    \n",
    "    while Runpot:\n",
    "        if bloqueoUART == 0:\n",
    "            arduino.write(bytes('R', 'utf-8'))\n",
    "            bloqueoUART = 1\n",
    "            time.sleep(0.3)\n",
    "        else:\n",
    "            arduino.write(bytes('Q', 'utf-8'))\n",
    "            time.sleep(0.1)\n",
    "            mensaje = arduino.readline().decode('utf-8')  # Si se recibe un mensaje del atmega328p\n",
    "        \n",
    "        if cambio == 0:\n",
    "            entry1.delete(0, 'end')\n",
    "            entry1.insert(0, mensaje)\n",
    "            cambio = 1\n",
    "        else:\n",
    "            entry2.delete(0, 'end')\n",
    "            entry2.insert(0, mensaje)\n",
    "            cambio = 0\n",
    "\n",
    "#--------------------------------------------------------- \n",
    "\n",
    "#------------\n",
    "# Configure arduino\n",
    "#------------\n",
    "arduino = serial.Serial('COM4', 9600)\n",
    "hilo1 = threading.Thread(target=pots, daemon=True)\n",
    "hilo1.start()\n",
    "\n",
    "#---------------------------------------------------------\n",
    "\n",
    "#------------\n",
    "# Contador de 8 bits\n",
    "#------------\n",
    "def contador():  # Funcion que se activa cuando se presiona el boton del contador\n",
    "    n1 = entry.get()\n",
    "    \n",
    "    if not n1.isdigit():\n",
    "        lbl158.delete(0, 'end')\n",
    "        lbl158.insert(0, \"Debe ser un número\")  # Mensaje de error\n",
    "        return  # Sale de la función si la entrada no es válida\n",
    "    \n",
    "    n2 = int(n1)\n",
    "    if n2 > 255:\n",
    "        lbl158.delete(0, 'end')\n",
    "        lbl158.insert(0, \"El número debe ser de 0 a 255\")\n",
    "        return\n",
    "    \n",
    "    # Dividir el numero en 3 numeros individuales\n",
    "    centenas = int((n2 % 1000) / 100)\n",
    "    decenas = int((n2 % 100) / 10)\n",
    "    unidades = n2 % 10\n",
    "    \n",
    "    arduino.write(bytes('A', 'utf-8'))  # Decirle a Arduino que se va a enviar algo al contador\n",
    "    time.sleep(0.1)\n",
    "    \n",
    "    # Enviar los valores individuales a Arduino\n",
    "    for digit in (centenas, decenas, unidades):\n",
    "        arduino.write(bytes(str(digit), 'utf-8'))\n",
    "        time.sleep(0.1)\n",
    "    \n",
    "    lbl158.delete(0, 'end')\n",
    "    lbl158.insert(0, \"Mostrando número\")\n",
    "\n",
    "#---------------------------------------------------------\n",
    "\n",
    "#------------\n",
    "# widgets in GUI\n",
    "#------------\n",
    "\n",
    "lbl = Label(root, text=\"Interfaz 21186\", bg='#800080', fg=\"white\")\n",
    "lbl.pack()  # Ubicar el dato\n",
    "\n",
    "separatorLabel1 = Label(root, text=\"////////////////////////////////////////////////////////////////////////////\", fg='black')\n",
    "separatorLabel1.pack()  # Ubicar el dato\n",
    "\n",
    "lbl1 = Label(root, text=\"S1:\", bg=\"#00FFFF\")\n",
    "lbl1.place(x=50, y=70, width=130, height=30)\n",
    "\n",
    "lbl2 = Label(root, text=\"S2:\", bg=\"#00FFFF\")\n",
    "lbl2.place(x=50, y=120, width=130, height=30)\n",
    "\n",
    "btn = Button(root, text=\"Actualizar\", command=contador, bg=\"red\", fg=\"white\")  # colocar el boton de envio de número al contador\n",
    "btn.place(x=50, y=200)\n",
    "\n",
    "entry = Entry(root, bg='#fdf2e9')\n",
    "entry.place(x=200, y=200, width=100, height=30)\n",
    "\n",
    "lbl15 = Label(root, text=\"Comentario:\", bg=\"yellow\")\n",
    "lbl15.place(x=50, y=250, width=130, height=30)\n",
    "\n",
    "lbl158 = Entry(root, bg='#fdf2e9')\n",
    "lbl158.place(x=200, y=250, width=180, height=30)\n",
    "\n",
    "#---------------------------------------------------------\n",
    "\n",
    "root.mainloop()  # Bucle infinito"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22e5f028-a3d9-45d2-9812-e70a7cf22c16",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
